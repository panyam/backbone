// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package teams

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Error struct {
}

func NewError() *Error {
	return &Error{}
}

func (p *Error) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Error) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Error"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Error) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Error(%+v)", *p)
}

func (p *Error) Error() string {
	return p.String()
}

type InvalidOperation struct {
	What int32  `thrift:"what,1" json:"what"`
	Why  string `thrift:"why,2" json:"why"`
}

func NewInvalidOperation() *InvalidOperation {
	return &InvalidOperation{}
}

func (p *InvalidOperation) GetWhat() int32 {
	return p.What
}

func (p *InvalidOperation) GetWhy() string {
	return p.Why
}
func (p *InvalidOperation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidOperation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.What = v
	}
	return nil
}

func (p *InvalidOperation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Why = v
	}
	return nil
}

func (p *InvalidOperation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidOperation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidOperation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("what", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:what: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.What)); err != nil {
		return fmt.Errorf("%T.what (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:what: %s", p, err)
	}
	return err
}

func (p *InvalidOperation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("why", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:why: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Why)); err != nil {
		return fmt.Errorf("%T.why (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:why: %s", p, err)
	}
	return err
}

func (p *InvalidOperation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidOperation(%+v)", *p)
}

func (p *InvalidOperation) Error() string {
	return p.String()
}

type UTCTime struct {
	Year        int8  `thrift:"Year,1" json:"Year"`
	Month       int8  `thrift:"Month,2" json:"Month"`
	Day         int8  `thrift:"Day,3" json:"Day"`
	Hour        int8  `thrift:"Hour,4" json:"Hour"`
	Minute      int8  `thrift:"Minute,5" json:"Minute"`
	Second      int8  `thrift:"Second,6" json:"Second"`
	MicroSecond int32 `thrift:"MicroSecond,7" json:"MicroSecond"`
}

func NewUTCTime() *UTCTime {
	return &UTCTime{}
}

func (p *UTCTime) GetYear() int8 {
	return p.Year
}

func (p *UTCTime) GetMonth() int8 {
	return p.Month
}

func (p *UTCTime) GetDay() int8 {
	return p.Day
}

func (p *UTCTime) GetHour() int8 {
	return p.Hour
}

func (p *UTCTime) GetMinute() int8 {
	return p.Minute
}

func (p *UTCTime) GetSecond() int8 {
	return p.Second
}

func (p *UTCTime) GetMicroSecond() int32 {
	return p.MicroSecond
}
func (p *UTCTime) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UTCTime) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := int8(v)
		p.Year = temp
	}
	return nil
}

func (p *UTCTime) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := int8(v)
		p.Month = temp
	}
	return nil
}

func (p *UTCTime) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Day = temp
	}
	return nil
}

func (p *UTCTime) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := int8(v)
		p.Hour = temp
	}
	return nil
}

func (p *UTCTime) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := int8(v)
		p.Minute = temp
	}
	return nil
}

func (p *UTCTime) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := int8(v)
		p.Second = temp
	}
	return nil
}

func (p *UTCTime) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.MicroSecond = v
	}
	return nil
}

func (p *UTCTime) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UTCTime"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UTCTime) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Year", thrift.BYTE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Year: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Year)); err != nil {
		return fmt.Errorf("%T.Year (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Year: %s", p, err)
	}
	return err
}

func (p *UTCTime) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Month", thrift.BYTE, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Month: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Month)); err != nil {
		return fmt.Errorf("%T.Month (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Month: %s", p, err)
	}
	return err
}

func (p *UTCTime) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Day", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Day: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Day)); err != nil {
		return fmt.Errorf("%T.Day (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Day: %s", p, err)
	}
	return err
}

func (p *UTCTime) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Hour", thrift.BYTE, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Hour: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Hour)); err != nil {
		return fmt.Errorf("%T.Hour (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Hour: %s", p, err)
	}
	return err
}

func (p *UTCTime) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Minute", thrift.BYTE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:Minute: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Minute)); err != nil {
		return fmt.Errorf("%T.Minute (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:Minute: %s", p, err)
	}
	return err
}

func (p *UTCTime) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Second", thrift.BYTE, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:Second: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Second)); err != nil {
		return fmt.Errorf("%T.Second (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:Second: %s", p, err)
	}
	return err
}

func (p *UTCTime) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("MicroSecond", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:MicroSecond: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MicroSecond)); err != nil {
		return fmt.Errorf("%T.MicroSecond (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:MicroSecond: %s", p, err)
	}
	return err
}

func (p *UTCTime) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UTCTime(%+v)", *p)
}

type User struct {
	Base     *Object `thrift:"Base,1" json:"Base"`
	Username string  `thrift:"Username,2" json:"Username"`
	Team     *Team   `thrift:"Team,3" json:"Team"`
}

func NewUser() *User {
	return &User{}
}

var User_Base_DEFAULT Object

func (p *User) GetBase() Object {
	if !p.IsSetBase() {
		return User_Base_DEFAULT
	}
	return *p.Base
}

func (p *User) GetUsername() string {
	return p.Username
}

var User_Team_DEFAULT Team

func (p *User) GetTeam() Team {
	if !p.IsSetTeam() {
		return User_Team_DEFAULT
	}
	return *p.Team
}
func (p *User) IsSetBase() bool {
	return p.Base != nil
}

func (p *User) IsSetTeam() bool {
	return p.Team != nil
}

func (p *User) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *User) ReadField1(iprot thrift.TProtocol) error {
	p.Base = &Object{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *User) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *User) ReadField3(iprot thrift.TProtocol) error {
	p.Team = &Team{}
	if err := p.Team.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Team, err)
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("User"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
	}
	return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Username", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.Username (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Username: %s", p, err)
	}
	return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Team", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Team: %s", p, err)
	}
	if err := p.Team.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Team, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Team: %s", p, err)
	}
	return err
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

type SaveUserRequest struct {
	User     *User `thrift:"User,1" json:"User"`
	Override bool  `thrift:"Override,2" json:"Override"`
}

func NewSaveUserRequest() *SaveUserRequest {
	return &SaveUserRequest{}
}

var SaveUserRequest_User_DEFAULT *User

func (p *SaveUserRequest) GetUser() *User {
	if !p.IsSetUser() {
		return SaveUserRequest_User_DEFAULT
	}
	return p.User
}

func (p *SaveUserRequest) GetOverride() bool {
	return p.Override
}
func (p *SaveUserRequest) IsSetUser() bool {
	return p.User != nil
}

func (p *SaveUserRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SaveUserRequest) ReadField1(iprot thrift.TProtocol) error {
	p.User = &User{}
	if err := p.User.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.User, err)
	}
	return nil
}

func (p *SaveUserRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Override = v
	}
	return nil
}

func (p *SaveUserRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SaveUserRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SaveUserRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("User", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:User: %s", p, err)
	}
	if err := p.User.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.User, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:User: %s", p, err)
	}
	return err
}

func (p *SaveUserRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Override", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Override: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Override)); err != nil {
		return fmt.Errorf("%T.Override (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Override: %s", p, err)
	}
	return err
}

func (p *SaveUserRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveUserRequest(%+v)", *p)
}

type Object struct {
	Loaded  bool     `thrift:"Loaded,1" json:"Loaded"`
	Id      int64    `thrift:"Id,2" json:"Id"`
	Created *UTCTime `thrift:"Created,3" json:"Created"`
	Status  int32    `thrift:"Status,4" json:"Status"`
}

func NewObject() *Object {
	return &Object{}
}

func (p *Object) GetLoaded() bool {
	return p.Loaded
}

func (p *Object) GetId() int64 {
	return p.Id
}

var Object_Created_DEFAULT *UTCTime

func (p *Object) GetCreated() *UTCTime {
	if !p.IsSetCreated() {
		return Object_Created_DEFAULT
	}
	return p.Created
}

func (p *Object) GetStatus() int32 {
	return p.Status
}
func (p *Object) IsSetCreated() bool {
	return p.Created != nil
}

func (p *Object) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Object) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Loaded = v
	}
	return nil
}

func (p *Object) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Object) ReadField3(iprot thrift.TProtocol) error {
	p.Created = &UTCTime{}
	if err := p.Created.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Created, err)
	}
	return nil
}

func (p *Object) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *Object) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Object"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Object) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Loaded", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Loaded: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Loaded)); err != nil {
		return fmt.Errorf("%T.Loaded (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Loaded: %s", p, err)
	}
	return err
}

func (p *Object) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Id", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.Id (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Id: %s", p, err)
	}
	return err
}

func (p *Object) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Created", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Created: %s", p, err)
	}
	if err := p.Created.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Created, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Created: %s", p, err)
	}
	return err
}

func (p *Object) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Status", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.Status (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Status: %s", p, err)
	}
	return err
}

func (p *Object) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Object(%+v)", *p)
}

type GetTeamsRequest struct {
	Organization string `thrift:"Organization,1" json:"Organization"`
	Offset       int32  `thrift:"Offset,2" json:"Offset"`
	Count        int32  `thrift:"Count,3" json:"Count"`
}

func NewGetTeamsRequest() *GetTeamsRequest {
	return &GetTeamsRequest{}
}

func (p *GetTeamsRequest) GetOrganization() string {
	return p.Organization
}

func (p *GetTeamsRequest) GetOffset() int32 {
	return p.Offset
}

func (p *GetTeamsRequest) GetCount() int32 {
	return p.Count
}
func (p *GetTeamsRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTeamsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Organization = v
	}
	return nil
}

func (p *GetTeamsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetTeamsRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *GetTeamsRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTeamsRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTeamsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Organization", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Organization: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Organization)); err != nil {
		return fmt.Errorf("%T.Organization (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Organization: %s", p, err)
	}
	return err
}

func (p *GetTeamsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Offset", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Offset: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Offset)); err != nil {
		return fmt.Errorf("%T.Offset (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Offset: %s", p, err)
	}
	return err
}

func (p *GetTeamsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Count", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.Count (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Count: %s", p, err)
	}
	return err
}

func (p *GetTeamsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTeamsRequest(%+v)", *p)
}

type TeamMembershipRequest struct {
	Team     *Team  `thrift:"Team,1" json:"Team"`
	Username string `thrift:"Username,2" json:"Username"`
}

func NewTeamMembershipRequest() *TeamMembershipRequest {
	return &TeamMembershipRequest{}
}

var TeamMembershipRequest_Team_DEFAULT Team

func (p *TeamMembershipRequest) GetTeam() Team {
	if !p.IsSetTeam() {
		return TeamMembershipRequest_Team_DEFAULT
	}
	return *p.Team
}

func (p *TeamMembershipRequest) GetUsername() string {
	return p.Username
}
func (p *TeamMembershipRequest) IsSetTeam() bool {
	return p.Team != nil
}

func (p *TeamMembershipRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TeamMembershipRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Team = &Team{}
	if err := p.Team.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Team, err)
	}
	return nil
}

func (p *TeamMembershipRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *TeamMembershipRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TeamMembershipRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TeamMembershipRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Team", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Team: %s", p, err)
	}
	if err := p.Team.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Team, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Team: %s", p, err)
	}
	return err
}

func (p *TeamMembershipRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Username", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Username: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return fmt.Errorf("%T.Username (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Username: %s", p, err)
	}
	return err
}

func (p *TeamMembershipRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TeamMembershipRequest(%+v)", *p)
}

type Team struct {
	Base         *Object `thrift:"Base,1" json:"Base"`
	Name         string  `thrift:"Name,2" json:"Name"`
	Organization string  `thrift:"Organization,3" json:"Organization"`
}

func NewTeam() *Team {
	return &Team{}
}

var Team_Base_DEFAULT *Object

func (p *Team) GetBase() *Object {
	if !p.IsSetBase() {
		return Team_Base_DEFAULT
	}
	return p.Base
}

func (p *Team) GetName() string {
	return p.Name
}

func (p *Team) GetOrganization() string {
	return p.Organization
}
func (p *Team) IsSetBase() bool {
	return p.Base != nil
}

func (p *Team) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Team) ReadField1(iprot thrift.TProtocol) error {
	p.Base = &Object{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *Team) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Team) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Organization = v
	}
	return nil
}

func (p *Team) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Team"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Team) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Base: %s", p, err)
	}
	return err
}

func (p *Team) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.Name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Name: %s", p, err)
	}
	return err
}

func (p *Team) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Organization", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Organization: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Organization)); err != nil {
		return fmt.Errorf("%T.Organization (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Organization: %s", p, err)
	}
	return err
}

func (p *Team) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Team(%+v)", *p)
}
